cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
}
)
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot(aes(x = Year, y = Crude_Rate, color = State,)) +
geom_line() +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot(aes(x = Year, y = Crude_Rate)) +
geom_line() +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot()) +
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot(aes(x = Year)) +
geom_line(y = Crude_Rate) +
labs(y = 'Death rate per 100k') +
theme_minimal()
setwd("C:/Users/StanfordLee/Documents/CUNY_DATA_608/module3")
# Chunk 1
# Libraries
library(ggplot2)
library(dplyr)
library(shiny)
library(kableExtra)
# Chunk 2
#runApp("Sample Apps/ggplot-reactive.R")
# Chunk 3
#runApp("Sample Apps/ggplot-simple")
# Chunk 4
#runApp("Sample Apps/ggplot-simplest")
# Chunk 5
#runApp("Sample Apps/plotly-simple")
# Chunk 6
cdc <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv", header= TRUE)
colnames(cdc) <- c('Chapter','State','Year','Deaths','Population','Crude_Rate')
# Chunk 7
# # Define UI for app that draws a histogram ----
# ui <- fluidPage(
#   # App title ----
#   titlePanel("Hello Shiny!"),
#   # Sidebar layout with input and output definitions ----
#   sidebarLayout(
#     # Sidebar panel for inputs ----
#     sidebarPanel(
#       # Input: Slider for the number of bins ----
#       sliderInput(inputId = "bins",
#                   label = "Number of bins:",
#                   min = 1,
#                   max = 50,
#                   value = 30)
#     ),
#
#     # Main panel for displaying outputs ----
#     mainPanel(
#       # Output: Histogram ----
#       plotOutput(outputId = "distPlot")
#     )
#   )
# )
# # Define server logic ----
# server <- function(input, output) {
#
# }
#
# # Run the app ----
# shinyApp(ui = ui, server = server)
# Chunk 8
knitr::include_graphics(c("fluidpage.png","function.png","run.png"))
# Chunk 9
ggplot(cdc%>%filter(Year==2010), aes(x = reorder(State, Crude_Rate), y = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate") +
geom_bar(stat = "identity") +
coord_flip()
# Chunk 10
#https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/
ui <- fluidPage(
titlePanel("Crude Mortality Rate Causes By State"),
sidebarLayout(position="right",
sidebarPanel(
selectInput("choose" ,h5(strong("Select Causes of Death")),
choices = cdc$Chapter,
selected = 1,
width = '100%')
),
mainPanel(
# img(src = "CDC Logo.png"),
plotOutput(outputId ="distPlot")
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
ggplot(cdc[cdc$Chapter == input$choose ,]%>%filter(Year==2010) , aes(x = reorder(State, Crude_Rate), y = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate") +
geom_bar(stat = "identity") +
coord_flip()
}, width = 'auto', height = 'auto')
}
shinyApp(ui = ui, server = server)
#Calculate the National Totals
cdc<-cdc %>%
group_by(Year, Chapter) %>%
mutate(N_Population = sum(Population),
N_Deaths = sum(Deaths),
N_Crude_Rate = 10^5*(N_Deaths/N_Population)) %>%
group_by(Year, Chapter, State)
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot(aes(x = Year)) +
geom_line(y = Crude_Rate) +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot(aes(x = Year,y = Crude_Rate)) +
geom_line() +
labs(y = 'Death rate per 100k') +
theme_minimal()
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State %in% c('National', input$sel_state)) %>%
ggplot(aes(x = Year, y = Crude_Rate)) +
geom_line() +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State ==input$sel_state) %>%
ggplot(aes(x = Year, y = Crude_Rate)) +
geom_line() +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State ==input$sel_state) %>%
ggplot(aes(x = Year)) +
geom_line(y = Crude_Rate) +
labs(y = 'Death rate per 100k') +
theme_minimal()
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State ==input$sel_state) %>%
ggplot(aes(x = Year)) +
geom_line(y = Crude_Rate) +
geom_line(y = N_Crude_Rate) +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State ==input$sel_state) %>%
ggplot(aes(x = Year, y = Crude_Rate)) +
geom_line() +
geom_line(y = N_Crude_Rate) +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("State Vs National Average Crude Mortality"),
sidebarLayout(
sidebarPanel(
selectInput("sel_state", label = strong("State"),
choices = levels(as.factor(cdc$State)),
selected = 1),
selectInput("sel_death", label = strong("Cause of Death"),
choices = levels(as.factor(cdc$Chapter)),
selected = 1),
width = "auto"
),
mainPanel(
tabsetPanel(
tabPanel("Line Chart",plotOutput("distPlot")),
tabPanel("Bar-Line Chart",plotOutput("distPlot2"))
)
),
position = c("left", "right"),
fluid = TRUE
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death,
State ==input$sel_state) %>%
ggplot(aes(x = Year, y = Crude_Rate)) +
geom_line() +
geom_line(aes(x = Year, y = N_Crude_Rate)) +
labs(y = 'Death rate per 100k') +
theme_minimal()
})
output$distPlot2 <- renderPlot({
cdc %>%
select(Chapter, State, Year, N_Crude_Rate, Crude_Rate) %>%
filter(Chapter == input$sel_death, State == input$sel_state) %>%
ggplot() +
geom_bar(aes(x = Year, weight = Crude_Rate)) +
labs(x = "State", y = "Crude Mortality Rate \n(State)") +
geom_line(aes(x = Year,
y = N_Crude_Rate,
linetype = "National\nCrude Mortality\nAverage Rate"),
lwd = 2)
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='gabriel-c-cuny', token='5051B72280F3C351FFF59B95672A325E', secret='vhelh7w4gTf1fOMjYwlH9rLE6esau8ULpvrOv5fD')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gabriel-c-cuny', token='5051B72280F3C351FFF59B95672A325E', secret='vhelh7w4gTf1fOMjYwlH9rLE6esau8ULpvrOv5fD')
# Libraries
library(ggplot2)
library(dplyr)
library(shiny)
library(kableExtra)
library(rsconnect)
rsconnect::setAccountInfo(name='gabriel-c-cuny', token='5051B72280F3C351FFF59B95672A325E', secret='vhelh7w4gTf1fOMjYwlH9rLE6esau8ULpvrOv5fD')
deployApp()
rsconnect::setAccountInfo(name='gabriel-c-cuny', token='5051B72280F3C351FFF59B95672A325E', secret='vhelh7w4gTf1fOMjYwlH9rLE6esau8ULpvrOv5fD')
deployApp()
runApp()
